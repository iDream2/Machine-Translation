# -*- coding: utf-8 -*-
"""MachineTranslation.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1KnkwgG90IhevQ3IbMzgS3aeLl0GTkxZj
"""

!pip install fileupload
from nltk.translate.bleu_score import sentence_bleu
import io
import fileupload
import ipywidgets as widgets

def calculate_bleu_score(button):
    try:
        # Get the uploaded candidate translation file
        candidate_filename = next(iter(uploader_candidate.value)) #This line retrieves the first (and only) filename from the uploader_candidate widget's value attribute.
        #The uploader_candidate.value is a dictionary where the keys are filenames and the values are dictionaries containing information about the uploaded file.
        candidate_content = uploader_candidate.value[candidate_filename]['content']
        candidate = candidate_content.decode('utf-8').strip().split() #This line decodes the content of the file from bytes to a UTF-8 string, removes leading and trailing
        #whitespaces using strip(), and then splits the string into a list of words using split(). The resulting candidate list contains the individual words of the candidate translation.

        # Get the uploaded reference translation file
        reference_filename = next(iter(uploader_reference.value))
        reference_content = uploader_reference.value[reference_filename]['content']
        references = [line.decode('utf-8').strip().split() for line in reference_content.splitlines()]

        # Calculate BLEU score
        bleu_score = sentence_bleu(references, candidate)
        print(f'BLEU Score: {bleu_score}')
    except StopIteration:
        print("Please upload both candidate and reference translation files.")

# Create file uploaders for candidate and reference translations
uploader_candidate = widgets.FileUpload(accept='.txt', multiple=False, description='Upload Candidate Translation')
uploader_reference = widgets.FileUpload(accept='.txt', multiple=False, description='Upload Reference Translation')

# Create a button to trigger BLEU score calculation
calculate_button = widgets.Button(description='Calculate BLEU Score')
calculate_button.on_click(calculate_bleu_score)

# Create widgets to display the uploaded file names
candidate_filename_label = widgets.Label(value='Candidate Translation File: ')
reference_filename_label = widgets.Label(value='Reference Translation File: ')

def update_filename_labels(change):
    try:
        candidate_filename_label.value = f'Candidate Translation File: {next(iter(uploader_candidate.value))}'
        # This part accesses the value attribute of the uploader_candidate widget, which contains information about the uploaded files.
        #It is a dictionary where the keys are the filenames and the values are dictionaries containing information about each file.
        #This part creates an iterator over the keys (filenames) of the uploader_candidate.value dictionary.
        #This part uses the next function to get the first filename from the iterator. Since there is only one file uploaded (as specified by multiple=False in the FileUpload widget),
        #This part uses an f-string to format the string that will be displayed in the label.

    except StopIteration:
        pass
    try:
        reference_filename_label.value = f'Reference Translation File: {next(iter(uploader_reference.value))}'
    except StopIteration:
        pass

uploader_candidate.observe(update_filename_labels, names='value')
#this line of code sets up an observer to automatically update the display of the candidate translation filename label whenever a new file is uploaded using the uploader_candidate widget.
uploader_reference.observe(update_filename_labels, names='value')

# Display the file uploaders, file name labels, and the calculate button
display(uploader_candidate, candidate_filename_label, uploader_reference, reference_filename_label, calculate_button)